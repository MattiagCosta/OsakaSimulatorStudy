from tools import WriteBinaryFile, ReadBinaryFile
from datetime import datetime
from shutil import copyfile

ITEMS_LIST = [
	"akazukinCap",
	"alianCap",
	"antenaCap",
	"aoringoCap",
	"asukaMimi",
	"bodyBlade",
	"bodyVac",
	"bodyVibrator",
	"chair",
	"chiyoCap",
	"chiyoMimi",
	"chuchu",
	"clothAzmanga",
	"clothBlue",
	"clothCheerLeader",
	"clothDefault",
	"clothHatan",
	"clothPink",
	"clothPink2",
	"clothTrainingA",
	"clothTrainingB",
	"clothYamayuri",
	"conga",
	"diabolos",
	"domohornWinkle",
	"door",
	"ending",
	"etona",
	"etonaBraceletL",
	"etonaBraceletR",
	"etonaKubiwa",
	"etonaOsage",
	"etonaWing",
	"flypanB",
	"furin",
	"greenCap",
	"haibane",
	"haibaneRing",
	"helmetCap",
	"henshinBelt",
	"houchou",
	"iceCream",
	"jazi",
	"jaziYellow",
	"kitarouCap",
	"kosmosCap",
	"kotatsu",
	"kumaMimi",
	"kurobuchiMegane",
	"leotard",
	"lightSaber",
	"maidCap",
	"milk",
	"momo",
	"momoMimi",
	"mugiwaraCap",
	"multiMimi",
	"nekoMimi",
	"nekoShippo",
	"nenekoCap",
	"nurseCap",
	"osageCap",
	"otama",
	"pajamaOrange",
	"papaMakura",
	"punchingBag",
	"reiMimi",
	"reizouko",
	"ribbonDeFronCap",
	"saruMimi",
	"saruShippo",
	"segway",
	"senpuki",
	"shampooCap",
	"starMegane",
	"summerCap",
	"swim",
	"swimNoSholder1",
	"swimNoSholder2",
	"swimSholder1",
	"swimSholder2",
	"teleporter",
	"tv",
	"usaMimi",
	"witchCap"
]

FRESH_START_YEN = 50000
FRESH_START_ITEMS = ["chair", "clothDefault", "clothPink", "door" "nenekoCap", "tv"]

def CheckItemValidity(item: str, throw_error: bool = True) -> bool:
	validation = item in ITEMS_LIST
	if throw_error and not validation:
		raise ValueError(f"Item '{item}' is not valid. Valid items are: {ITEMS_LIST}.")
	return validation

class Tsu_han_datObject:
	def __init__(self, yen: int = FRESH_START_YEN, items_flags_to_check: list[str] = FRESH_START_ITEMS):
		self.yen = yen
		self.items = {item: False for item in ITEMS_LIST}
		for item in items_flags_to_check:
			self.CheckItemFlag(item)

	def SetYen(self, yen: int) -> None:
		self.yen = yen
	
	def GetYen(self) -> int:
		return self.yen
	
	def GetItemFlag(self, item: str) -> bool:
		CheckItemValidity(item)
		return self.items[item]

	def CheckItemFlag(self, item: str) -> None:
		CheckItemValidity(item)
		self.items[item] = True
	
	def CheckItemsFlags(self, items: list[str]) -> None:
		for item in items:
			self.CheckItemFlag(item)

	def UncheckItemFlag(self, item: str) -> None:
		CheckItemValidity(item)
		self.items[item] = False
	
	def UncheckItemsFlags(self, items: list[str]) -> None:
		for item in items:
			self.UncheckItemFlag(item)

	def ToggleItemFlag(self, item: str) -> None:
		CheckItemValidity(item)
		self.items[item] = not self.items[item]
	
	def ToggleItemsFlags(self, items: list[str]) -> None:
		for item in items:
			self.ToggleItemFlag(item)

TSU_HAN_DAT_SAMPLE_EXAMPLE = b"\x00\x00\x01\x00\xc3\xbc\xb7\x44\x03\xf8\x13\x41\x26\xa5\x7c\x42\xac\xe0\xb2\x42\x50\xc3\x00\x00\x55\x00\x00\x00\x0b\x61\x6b\x61\x7a\x75\x6b\x69\x6e\x43\x61\x70\x00\x00\x00\x00\x08\x61\x6c\x69\x61\x6e\x43\x61\x70\x00\x00\x00\x00\x09\x61\x6e\x74\x65\x6e\x61\x43\x61\x70\x00\x00\x00\x00\x0a\x61\x6f\x72\x69\x6e\x67\x6f\x43\x61\x70\x00\x00\x00\x00\x09\x61\x73\x75\x6b\x61\x4d\x69\x6d\x69\x00\x00\x00\x00\x09\x62\x6f\x64\x79\x42\x6c\x61\x64\x65\x00\x00\x00\x00\x07\x62\x6f\x64\x79\x56\x61\x63\x00\x00\x00\x00\x0c\x62\x6f\x64\x79\x56\x69\x62\x72\x61\x74\x6f\x72\x00\x00\x00\x00\x05\x63\x68\x61\x69\x72\x01\x00\x00\x00\x08\x63\x68\x69\x79\x6f\x43\x61\x70\x00\x00\x00\x00\x09\x63\x68\x69\x79\x6f\x4d\x69\x6d\x69\x00\x00\x00\x00\x06\x63\x68\x75\x63\x68\x75\x00\x00\x00\x00\x0c\x63\x6c\x6f\x74\x68\x41\x7a\x6d\x61\x6e\x67\x61\x00\x00\x00\x00\x09\x63\x6c\x6f\x74\x68\x42\x6c\x75\x65\x00\x00\x00\x00\x10\x63\x6c\x6f\x74\x68\x43\x68\x65\x65\x72\x4c\x65\x61\x64\x65\x72\x00\x00\x00\x00\x0c\x63\x6c\x6f\x74\x68\x44\x65\x66\x61\x75\x6c\x74\x01\x00\x00\x00\x0a\x63\x6c\x6f\x74\x68\x48\x61\x74\x61\x6e\x00\x00\x00\x00\x09\x63\x6c\x6f\x74\x68\x50\x69\x6e\x6b\x01\x00\x00\x00\x0a\x63\x6c\x6f\x74\x68\x50\x69\x6e\x6b\x32\x00\x00\x00\x00\x0e\x63\x6c\x6f\x74\x68\x54\x72\x61\x69\x6e\x69\x6e\x67\x41\x00\x00\x00\x00\x0e\x63\x6c\x6f\x74\x68\x54\x72\x61\x69\x6e\x69\x6e\x67\x42\x00\x00\x00\x00\x0d\x63\x6c\x6f\x74\x68\x59\x61\x6d\x61\x79\x75\x72\x69\x00\x00\x00\x00\x05\x63\x6f\x6e\x67\x61\x00\x00\x00\x00\x08\x64\x69\x61\x62\x6f\x6c\x6f\x73\x00\x00\x00\x00\x0e\x64\x6f\x6d\x6f\x68\x6f\x72\x6e\x57\x69\x6e\x6b\x6c\x65\x00\x00\x00\x00\x04\x64\x6f\x6f\x72\x01\x00\x00\x00\x06\x65\x6e\x64\x69\x6e\x67\x00\x00\x00\x00\x05\x65\x74\x6f\x6e\x61\x00\x00\x00\x00\x0e\x65\x74\x6f\x6e\x61\x42\x72\x61\x63\x65\x6c\x65\x74\x4c\x00\x00\x00\x00\x0e\x65\x74\x6f\x6e\x61\x42\x72\x61\x63\x65\x6c\x65\x74\x52\x00\x00\x00\x00\x0b\x65\x74\x6f\x6e\x61\x4b\x75\x62\x69\x77\x61\x00\x00\x00\x00\x0a\x65\x74\x6f\x6e\x61\x4f\x73\x61\x67\x65\x00\x00\x00\x00\x09\x65\x74\x6f\x6e\x61\x57\x69\x6e\x67\x00\x00\x00\x00\x07\x66\x6c\x79\x70\x61\x6e\x42\x00\x00\x00\x00\x05\x66\x75\x72\x69\x6e\x00\x00\x00\x00\x08\x67\x72\x65\x65\x6e\x43\x61\x70\x00\x00\x00\x00\x07\x68\x61\x69\x62\x61\x6e\x65\x00\x00\x00\x00\x0b\x68\x61\x69\x62\x61\x6e\x65\x52\x69\x6e\x67\x00\x00\x00\x00\x09\x68\x65\x6c\x6d\x65\x74\x43\x61\x70\x00\x00\x00\x00\x0b\x68\x65\x6e\x73\x68\x69\x6e\x42\x65\x6c\x74\x00\x00\x00\x00\x07\x68\x6f\x75\x63\x68\x6f\x75\x00\x00\x00\x00\x08\x69\x63\x65\x43\x72\x65\x61\x6d\x00\x00\x00\x00\x04\x6a\x61\x7a\x69\x00\x00\x00\x00\x0a\x6a\x61\x7a\x69\x59\x65\x6c\x6c\x6f\x77\x00\x00\x00\x00\x0a\x6b\x69\x74\x61\x72\x6f\x75\x43\x61\x70\x00\x00\x00\x00\x09\x6b\x6f\x73\x6d\x6f\x73\x43\x61\x70\x00\x00\x00\x00\x07\x6b\x6f\x74\x61\x74\x73\x75\x00\x00\x00\x00\x08\x6b\x75\x6d\x61\x4d\x69\x6d\x69\x00\x00\x00\x00\x0f\x6b\x75\x72\x6f\x62\x75\x63\x68\x69\x4d\x65\x67\x61\x6e\x65\x00\x00\x00\x00\x07\x6c\x65\x6f\x74\x61\x72\x64\x00\x00\x00\x00\x0a\x6c\x69\x67\x68\x74\x53\x61\x62\x65\x72\x00\x00\x00\x00\x07\x6d\x61\x69\x64\x43\x61\x70\x00\x00\x00\x00\x04\x6d\x69\x6c\x6b\x00\x00\x00\x00\x04\x6d\x6f\x6d\x6f\x00\x00\x00\x00\x08\x6d\x6f\x6d\x6f\x4d\x69\x6d\x69\x00\x00\x00\x00\x0b\x6d\x75\x67\x69\x77\x61\x72\x61\x43\x61\x70\x00\x00\x00\x00\x09\x6d\x75\x6c\x74\x69\x4d\x69\x6d\x69\x00\x00\x00\x00\x08\x6e\x65\x6b\x6f\x4d\x69\x6d\x69\x00\x00\x00\x00\x0a\x6e\x65\x6b\x6f\x53\x68\x69\x70\x70\x6f\x00\x00\x00\x00\x09\x6e\x65\x6e\x65\x6b\x6f\x43\x61\x70\x01\x00\x00\x00\x08\x6e\x75\x72\x73\x65\x43\x61\x70\x00\x00\x00\x00\x08\x6f\x73\x61\x67\x65\x43\x61\x70\x00\x00\x00\x00\x05\x6f\x74\x61\x6d\x61\x00\x00\x00\x00\x0c\x70\x61\x6a\x61\x6d\x61\x4f\x72\x61\x6e\x67\x65\x00\x00\x00\x00\x0a\x70\x61\x70\x61\x4d\x61\x6b\x75\x72\x61\x00\x00\x00\x00\x0b\x70\x75\x6e\x63\x68\x69\x6e\x67\x42\x61\x67\x00\x00\x00\x00\x07\x72\x65\x69\x4d\x69\x6d\x69\x00\x00\x00\x00\x08\x72\x65\x69\x7a\x6f\x75\x6b\x6f\x00\x00\x00\x00\x0f\x72\x69\x62\x62\x6f\x6e\x44\x65\x46\x72\x6f\x6e\x43\x61\x70\x00\x00\x00\x00\x08\x73\x61\x72\x75\x4d\x69\x6d\x69\x00\x00\x00\x00\x0a\x73\x61\x72\x75\x53\x68\x69\x70\x70\x6f\x00\x00\x00\x00\x06\x73\x65\x67\x77\x61\x79\x00\x00\x00\x00\x07\x73\x65\x6e\x70\x75\x6b\x69\x00\x00\x00\x00\x0a\x73\x68\x61\x6d\x70\x6f\x6f\x43\x61\x70\x00\x00\x00\x00\x0a\x73\x74\x61\x72\x4d\x65\x67\x61\x6e\x65\x00\x00\x00\x00\x09\x73\x75\x6d\x6d\x65\x72\x43\x61\x70\x00\x00\x00\x00\x04\x73\x77\x69\x6d\x00\x00\x00\x00\x0e\x73\x77\x69\x6d\x4e\x6f\x53\x68\x6f\x6c\x64\x65\x72\x31\x00\x00\x00\x00\x0e\x73\x77\x69\x6d\x4e\x6f\x53\x68\x6f\x6c\x64\x65\x72\x32\x00\x00\x00\x00\x0c\x73\x77\x69\x6d\x53\x68\x6f\x6c\x64\x65\x72\x31\x00\x00\x00\x00\x0c\x73\x77\x69\x6d\x53\x68\x6f\x6c\x64\x65\x72\x32\x00\x00\x00\x00\x0a\x74\x65\x6c\x65\x70\x6f\x72\x74\x65\x72\x00\x00\x00\x00\x02\x74\x76\x01\x00\x00\x00\x07\x75\x73\x61\x4d\x69\x6d\x69\x00\x00\x00\x00\x08\x77\x69\x74\x63\x68\x43\x61\x70\x00\x00\x00\x00"

BEGINNING_MESS_LENGTH = 29

YEN_POSITION = 20
YEN_LENGTH = 4
YEN_LIMIT = 100_000_000

def GetItemPositionInSample(item: str) -> int:
	CheckItemValidity(item)
	item_list_index = ITEMS_LIST.index(item)
	items_before_length = 0
	for other_item in ITEMS_LIST:
		if other_item == item: break
		items_before_length += len(other_item)
	return BEGINNING_MESS_LENGTH + items_before_length + 5 * item_list_index

def GetItemFlagPositionInSample(item:str) -> int:
	return GetItemPositionInSample(item) + len(item)

def CreateTsu_han_datSample(tsu_han_dat_object: Tsu_han_datObject) -> bytes:
	sample = TSU_HAN_DAT_SAMPLE_EXAMPLE

	yen_in_bytes = tsu_han_dat_object.GetYen().to_bytes(YEN_LENGTH, 'little')
	sample = sample[:YEN_POSITION] + yen_in_bytes + sample[YEN_POSITION + YEN_LENGTH:]

	for item in ITEMS_LIST:
		flag = tsu_han_dat_object.GetItemFlag(item)
		if flag: flag = b'\x01'
		else: flag = b'\x00'
		flag_position = GetItemFlagPositionInSample(item)
		sample = sample[:flag_position] + flag + sample[flag_position + 1:]

	return sample

def CreateTsu_han_datFile(tsu_han_dat_sample: bytes) -> str:
	file_path = "./tsu_han_dat_files/"
	today_datetime = datetime.now()
	file_path += today_datetime.strftime("%Y-%m-%d_%H-%M-%S") + "/tsu_han.dat"
	WriteBinaryFile(file_path, tsu_han_dat_sample)
	return file_path

def ReplaceTsu_han_datFileInGame(tsu_han_dat_file_created_path: str, tsu_han_dat_game_file_path) -> None:
	copyfile(tsu_han_dat_file_created_path, tsu_han_dat_game_file_path)
	print(f"File '{tsu_han_dat_file_created_path}' copied to '{tsu_han_dat_game_file_path}'.")
	print("You can now load the game and see the changes.")

def LoadTsu_han_datFile(tsu_han_dat_file_path: str) -> Tsu_han_datObject:
	sample = ReadBinaryFile(tsu_han_dat_file_path)
	yen = sample[YEN_POSITION : YEN_POSITION + YEN_LENGTH]
	items = []
	for item in ITEMS_LIST:
		flag_position = GetItemFlagPositionInSample(item)
		if sample[flag_position] == b'x01':
			items.append(item)
	return Tsu_han_datObject(yen, items)

if __name__ == "__main__":
	tsu_han_dat_object = Tsu_han_datObject(items_flags_to_check=[])
	sample = CreateTsu_han_datSample(tsu_han_dat_object)
	file_path = CreateTsu_han_datFile(sample)
	ReplaceTsu_han_datFileInGame(file_path, "C:/Users/Matti/Osaka Simulator FINAL (standalone)/Osaka Simulator FINAL/tsu_han.dat")
